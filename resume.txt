```bash
# Arborescence du projet Docker DevOps

├── job-01.md
├── job-02.md
├── job-03.md
├── job-03.Dockerfile
├── job-04.md
├── job-04.Dockerfile
├── job-05.md
├── job-06.md
├── job-07.md
├── job-07.docker-compose.yml
├── job-08.md
├── job-08.Dockerfile
├── job-09.md
├── job-09/docker-compose.yml
├── job-09/registry-config.yaml
├── job-10.md
├── scripts
│   ├── cleanup-docker.sh
│   └── install-docker.sh
├── job-11.md
├── bonus.md
└── README.md
```

---

# job-01.md

## Objectif
Créer une VM Debian (console) avec 8 Go HDD, 1 Go RAM, 1 vCPU et installer Docker CLI.

## Mise en œuvre
1. **Création VM** (ex. avec VirtualBox ou Proxmox) :
   ```bash
   # VirtualBox example
   VBoxManage createvm --name debian-docker --ostype Debian_64 --register
   VBoxManage modifyvm debian-docker --cpus 1 --memory 1024 --nic1 nat
   VBoxManage createhd --filename ~/VirtualBox\ VMs/debian-docker/disk.vdi --size 8192
   VBoxManage storagectl debian-docker --name "SATA Controller" --add sata
   VBoxManage storageattach debian-docker --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium ~/VirtualBox\ VMs/debian-docker/disk.vdi
   VBoxManage storagectl debian-docker --name "IDE Controller" --add ide
   VBoxManage storageattach debian-docker --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium /chemin/debian.iso
   ```
2. **Installation Debian** : console seule, partitionnement minimal.
3. **Installation Docker CLI** :
   ```bash
   sudo apt-get update
   sudo apt-get install -y ca-certificates curl gnupg lsb-release
   curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
   echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" |
     sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   sudo apt-get update
   sudo apt-get install -y docker-ce-cli
   ```

## Vérification
```bash
docker --version
# Doit afficher Docker version xx.xx.xx, build xxxxxxx
```  

## Erreurs possibles & astuces
- **Clé GPG non trouvée** : vérifier l'URL de téléchargement.
- **Permission denied** : ajouter `sudo` sur commandes `docker` ou ajouter votre user au groupe `docker`.

---

# job-02.md

## Objectif
Tester l’installation Docker avec `hello-world` et découvrir les commandes de base.

## Mise en œuvre
```bash
# Tirer et exécuter l'image hello-world
docker run hello-world
# Lister images
docker image ls
# Lister conteneurs (actifs et inactifs)
docker ps -a
# Supprimer conteneur
docker rm <container_id>
# Supprimer image
docker rmi hello-world
```

## Explications
- `docker run`: recherche localement puis télécharge si nécessaire.
- `docker ps -a`: montre tous les conteneurs.

## Astuces
- Utiliser `--rm` pour nettoyage automatique: `docker run --rm hello-world`.

---

# job-03.md

## Objectif
Recréer `hello-world` depuis une image Debian minimale via Dockerfile.

## Fichiers générés
- `job-03.Dockerfile`

## job-03.Dockerfile
```dockerfile
FROM debian:stable-slim
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
  && rm -rf /var/lib/apt/lists/*
COPY hello.sh /usr/local/bin/hello.sh
RUN chmod +x /usr/local/bin/hello.sh
CMD ["/usr/local/bin/hello.sh"]
```

### hello.sh
```bash
#!/bin/bash
echo "Hello from custom hello-world container!"
```

## Mise en œuvre
```bash
docker build -t custom-hello-world -f job-03.Dockerfile .
docker run custom-hello-world
```

## Points d'attention
- Nettoyer le cache apt.

---

# job-04.md

## Objectif
Créer une image Docker avec SSH (root/root123), port externe 2222 → 22.

## job-04.Dockerfile
```dockerfile
FROM debian:stable-slim
RUN apt-get update && apt-get install -y openssh-server \
    && mkdir /var/run/sshd \
    && echo 'root:root123' | chpasswd
RUN sed -i 's/#Port 22/Port 22/' /etc/ssh/sshd_config
EXPOSE 22
CMD ["/usr/sbin/sshd","-D"]
```

## Lancement
```bash
docker build -t ssh-debian -f job-04.Dockerfile .
docker run -d -p 2222:22 --name ssh-test ssh-debian
```

## Vérification
```bash
ssh root@localhost -p 2222  # mot de passe: root123
```

---

# job-05.md

## Objectif
Créer des alias Docker dans `~/.bashrc`.

## Alias proposés
```bash
alias dps='docker ps'
alias dpa='docker ps -a'
alias dim='docker images'
alias drm='docker rm'
alias drmi='docker rmi'
```

## Mise en place
Ajouter à `~/.bashrc` puis `source ~/.bashrc`.

---

# job-06.md

## Objectif
Comprendre les volumes Docker et leur partage entre conteneurs.

## Exemples
```bash
# Créer volume
docker volume create data-vol
# Lancer deux conteneurs partageant le volume
docker run -d --name c1 -v data-vol:/data busybox tail -f /dev/null
docker run -d --name c2 -v data-vol:/data busybox tail -f /dev/null
# Dans c1: echo "test" > /data/file.txt
# Dans c2: cat /data/file.txt => test
```

---

# job-07.md

## Objectif
Via `docker-compose.yml`, lancer Nginx et FTP avec volume commun.

## job-07.docker-compose.yml
```yaml
version: '3.8'
services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "8080:80"
    volumes:
      - web-data:/usr/share/nginx/html:ro
  ftp:
    image: fauria/vsftpd
    environment:
      - FTP_USER=devops
      - FTP_PASS=dp1234
      - PASV_ADDRESS=localhost
      - PASV_MIN_PORT=30000
      - PASV_MAX_PORT=30009
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    volumes:
      - web-data:/home/devops/www
volumes:
  web-data:
```

## Étapes
1. `docker-compose up -d`
2. Créer `index.html` localement.
3. Avec FileZilla ↔ FTP localhost:21 (user devops/dp1234), déposer dans `/home/devops/www`.
4. Accéder à http://localhost:8080

---

# job-08.md

## Objectif
Construire Nginx sans image existante via Dockerfile.

## job-08.Dockerfile
```dockerfile
FROM debian:stable-slim
RUN apt-get update && apt-get install -y nginx \
    && rm -rf /var/lib/apt/lists/*
COPY default.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

### default.conf
```nginx
server {
    listen 80;
    server_name _;
    location / {
        root /usr/share/nginx/html;
        index index.html;
    }
}
```

## Lancement
```bash
docker build -t custom-nginx -f job-08.Dockerfile .
docker run -d -p 8081:80 custom-nginx
```

---

# job-09.md

## Objectif
Mettre en place un registre Docker local + UI.

## job-09/docker-compose.yml
```yaml
version: '3.8'
services:
  registry:
    image: registry:2
    ports:
      - "5000:5000"
    volumes:
      - registry-data:/var/lib/registry
  registry-ui:
    image: joxit/docker-registry-ui:latest
    ports:
      - "8082:80"
    environment:
      - REGISTRY_TITLE=Local Registry
      - REGISTRY_URL=http://registry:5000
    depends_on:
      - registry
volumes:
  registry-data:
```

## job-09/registry-config.yaml
```yaml
# Configuration avancée possible: authentification, stock multi-backend
```

## Lancement
```bash
docker-compose -f job-09/docker-compose.yml up -d
# Accéder UI: http://localhost:8082
```

---

# job-10.md

## Objectif
Créer deux scripts Bash : nettoyage total & installation Docker automatisée.

### scripts/cleanup-docker.sh
```bash
#!/bin/bash
set -e
echo "Stopping all containers..."
docker ps -q | xargs -r docker stop

echo "Removing all containers..."
docker ps -aq | xargs -r docker rm -f

echo "Removing all images..."
docker images -q | xargs -r docker rmi -f

echo "Removing all volumes..."
docker volume ls -q | xargs -r docker volume rm

echo "Purging packages..."
sudo apt-get purge -y docker-ce docker-ce-cli containerd.io
sudo apt-get autoremove -y

echo "Cleanup complete."
```  

### scripts/install-docker.sh
```bash
#!/bin/bash
set -e
echo "Installing prerequisites..."
sudo apt-get update
echo "Adding Docker GPG key..."
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo "Adding Docker repo..."
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" |
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

echo "Installing Docker..."
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io

echo "Installation complete."
```

---

# job-11.md

## Objectif
Découvrir Portainer et reproduire Jobs 2–9 via UI.

## Étapes
1. `docker volume create portainer_data`
2. Lancer Portainer :
   ```bash
   docker run -d -p 9000:9000 \
     -v /var/run/docker.sock:/var/run/docker.sock \
     -v portainer_data:/data \
     portainer/portainer-ce
   ```
3. Se connecter à http://localhost:9000
4. Refaire les déploiements des jobs 2 à 9 via l’interface.

## Alternatives
- Rancher
- Kubernetes Dashboard
- Docker Enterprise UI

---

# bonus.md

## Objectif
Reproduire XAMPP: Nginx/Apache+PHP, MariaDB, phpMyAdmin, FTP, volume commun.

## docker-compose.yml
```yaml
version: '3.8'
services:
  web:
    image: php:8.1-fpm-alpine
    volumes:
      - web-data:/var/www/html
  nginx:
    image: nginx:stable-alpine
    ports:
      - "8080:80"
    volumes:
      - web-data:/usr/share/nginx/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
  db:
    image: mariadb:10.6
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=appdb
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8081:80"
    environment:
      - PMA_HOST=db
  ftp:
    image: fauria/vsftpd
    environment:
      - FTP_USER=user
      - FTP_PASS=pass
    volumes:
      - web-data:/home/user/www
volumes:
  web-data:
```

## Commandes
docker-compose up -d

---

# README.md

## Projet Docker DevOps
Ce dépôt réunit 11 jobs pédagogiques pour maîtriser Docker sur Debian.

### Sommaire des jobs
- [Job 01](job-01.md) : VM + Docker CLI
- [Job 02](job-02.md) : test hello-world
- [Job 03](job-03.md) : custom hello-world Dockerfile
- [Job 04](job-04.md) : image SSH root
- [Job 05](job-05.md) : alias Bash Docker
- [Job 06](job-06.md) : volumes Docker
- [Job 07](job-07.md) : Nginx + FTP via compose
- [Job 08](job-08.md) : custom Nginx Dockerfile
- [Job 09](job-09.md) : registry local + UI
- [Job 10](job-10.md) : scripts cleanup & install
- [Job 11](job-11.md) : Portainer UI + alternatives
- [Bonus](bonus.md) : stack web/PHP/MariaDB/phpMyAdmin/FTP

## Usage générale
```bash
git clone https://github.com/prenom-nom/docker.git
cd docker
# Exécuter un job, ex. Job 07 :
docker-compose -f job-07.docker-compose.yml up -d
```

### Aller plus loin
- Sécuriser SSH (Clés, firewalls)
- CI/CD GitHub Actions
- Monitoring (Prometheus, Grafana)

---

# Sommaire console
```bash
$ tree -L 2
.
├── job-01.md
├── job-02.md
├── job-03.md
├── job-03.Dockerfile
├── job-04.md
├── job-04.Dockerfile
├── job-05.md
├── job-06.md
├── job-07.md
├── job-07.docker-compose.yml
├── job-08.md
├── job-08.Dockerfile
├── job-09
│   ├── docker-compose.yml
│   └── registry-config.yaml
├── job-09.md
├── job-10.md
├── scripts
│   ├── cleanup-docker.sh
│   └── install-docker.sh
├── job-11.md
├── bonus.md
└── README.md

18 directories, 25 files
```

